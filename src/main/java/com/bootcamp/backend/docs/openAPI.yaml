openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/KONRADPSTRONGOWSKI/skillmatx/1.0.0
  - description: Skill Matrix App
    url: https://localhost:4200
info:
  version: "1.0.0"
  title: skill-matrix-app
  description: The API for the employee management system
paths:
  /api/employees:
    get:
      tags:
        - Employee
      summary: Get all employees
      operationId: getAllEmployees
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employees'
              examples:
                example1:
                  $ref: '#/components/examples/employees'

    post:
      tags:
        - Employee
      summary: Add employee
      description: Add a new employee to the system
      operationId: addEmployee
      requestBody:
        description: Create a new employee in the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employee'
        required: true
      responses:
        '201':
          description: Employee created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employee'
        '400':
          description: Invalid input


  /api/employees/{employeeId}:
    get:
      tags:
        - Employee
      summary: Get employee by ID
      description: Returns a single employee
      operationId: getEmployeeById
      parameters:
        - name: employeeId
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employee'
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
    put:
      tags:
        - Employee
      summary: Update an existing employee
      description: Update an existing employee by Id
      operationId: updateEmployeeById
      parameters:
        - name: employeeId
          in: path
          description: ID of employee
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update an existing employee
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employee'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employee'
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
    delete:
      tags:
        - Employee
      summary: Deletes an employee by ID
      description: delete an employee by id
      operationId: deleteEmployeeById
      parameters:
        - name: employeeId
          in: path
          description: Employee id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
components:
  schemas:
    employee:
      required:
        - name
        - surname
        - managerId
        - date
        - skills
        - projects
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ea9006f1-ef25-40f4-a4f4-921f97fe0cf7
        name:
          type: string
          example: Kyle
        surname:
          type: string
          example: Rose
        managerId:
          type: string
          example: 0f0f771a-1826-4260-9f04-af80724410bb
        date:
          type: string
          example: '21.02.2015'
        skills:
          type: array
          items:
            type: string
          example: ["Java", "Ruby"]
        projects:
          type: array
          items:
            type: string
          example: ["Project 1", "Project 2"]
    employees:
      type: array
      items:
        $ref: '#/components/examples/employees'
  examples:
    employees:
      value:
        - id: ea9006f1-ef25-40f4-a4f4-921f97fe0cf7
          name: Kyle
          surname: Rose
          managerId: 0f0f771a-1826-4260-9f04-af80724410bb
          date: '21.02.2015'
          skills: ["Java", "Ruby"]
          projects: ["Project 1", "Project 2"]

        - id: ca1090b1-6813-4f16-8da2-5439c835e38c
          name: Emily
          surname: Brooks
          managerId: 0f0f771a-1826-4260-9f04-af80724410bb
          date: '14.03.2015'
          skills: ["Python"]
          projects: ["Project 1"]

        - id: bde20ad9-6244-44bb-9b66-c14067866f1d
          name: Alvaro
          surname: Villa
          managerId: 0f0f771a-1826-4260-9f04-af80724410bb
          date: '14.03.2015'
          skills: ["Python"]
          projects: ["Project 2"]

        - id: eb24ce1d-14c4-47c9-a727-465471de391f
          name: Sam
          surname: Page
          managerId: 0f0f771a-1826-4260-9f04-af80724410bb
          date: '14.03.2015'
          skills: ["Kotlin"]
          projects: ["Project 2"]

        - id: 0f0f771a-1826-4260-9f04-af80724410bb
          name: John
          surname: Moore
          managerId: 0f0f771a-1826-4260-9f04-af80724410bb
          date: '21.11.2010'
          skills: ["Python", "Java", "JavaScript"]
          projects: ["Project 1", "Project 2", "Project 3"]